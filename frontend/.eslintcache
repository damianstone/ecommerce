[{"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/index.js":"1","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/App.js":"2","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reportWebVitals.js":"3","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/store.js":"4","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Header.js":"5","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Footer.js":"6","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/HomeScreen.js":"7","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/RegisterScreen.js":"8","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/LoginScreen.js":"9","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/PaymentScreen.js":"10","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductScreen.js":"11","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProfileScreen.js":"12","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/PlaceOrderScreen.js":"13","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/CartScreen.js":"14","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ShippingScreen.js":"15","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/UserListScreen.js":"16","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/UserEditScreen.js":"17","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductListScreen.js":"18","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/OrderListScreen.js":"19","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductEditScreen.js":"20","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/OrderScreen.js":"21","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/cartReducers.js":"22","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/productReducers.js":"23","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/orderReducers.js":"24","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/userReducers.js":"25","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/SearchBox.js":"26","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/ProductCarousel.js":"27","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Paginate.js":"28","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/FormContainer.js":"29","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/CheckoutSteps.js":"30","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Loader.js":"31","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Product.js":"32","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Message.js":"33","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Rating.js":"34","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/userActions.js":"35","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/cartActions.js":"36","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/productActions.js":"37","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/orderActions.js":"38","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/cartConstants.js":"39","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/orderConstants.js":"40","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/userConstants.js":"41","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/productConstants.js":"42"},{"size":594,"mtime":1652479242085,"results":"43","hashOfConfig":"44"},{"size":2189,"mtime":1651827531907,"results":"45","hashOfConfig":"44"},{"size":362,"mtime":1651827531914,"results":"46","hashOfConfig":"44"},{"size":2381,"mtime":1655051278399,"results":"47","hashOfConfig":"44"},{"size":2497,"mtime":1655059133006,"results":"48","hashOfConfig":"44"},{"size":322,"mtime":1651867246329,"results":"49","hashOfConfig":"44"},{"size":1341,"mtime":1653757236304,"results":"50","hashOfConfig":"44"},{"size":3225,"mtime":1655059331883,"results":"51","hashOfConfig":"44"},{"size":2191,"mtime":1655058026443,"results":"52","hashOfConfig":"44"},{"size":1459,"mtime":1651867968505,"results":"53","hashOfConfig":"44"},{"size":7159,"mtime":1654207111409,"results":"54","hashOfConfig":"44"},{"size":5845,"mtime":1655063904331,"results":"55","hashOfConfig":"44"},{"size":5179,"mtime":1651867994947,"results":"56","hashOfConfig":"44"},{"size":3647,"mtime":1654288902902,"results":"57","hashOfConfig":"44"},{"size":2599,"mtime":1651868087307,"results":"58","hashOfConfig":"44"},{"size":2716,"mtime":1651868120619,"results":"59","hashOfConfig":"44"},{"size":3115,"mtime":1651868107508,"results":"60","hashOfConfig":"44"},{"size":4071,"mtime":1651868043678,"results":"61","hashOfConfig":"44"},{"size":2524,"mtime":1651867921109,"results":"62","hashOfConfig":"44"},{"size":6015,"mtime":1651868011400,"results":"63","hashOfConfig":"44"},{"size":7268,"mtime":1651867939137,"results":"64","hashOfConfig":"44"},{"size":1290,"mtime":1654211560006,"results":"65","hashOfConfig":"44"},{"size":3680,"mtime":1653168322382,"results":"66","hashOfConfig":"44"},{"size":4079,"mtime":1651827531914,"results":"67","hashOfConfig":"44"},{"size":3927,"mtime":1655064130757,"results":"68","hashOfConfig":"44"},{"size":826,"mtime":1651867416312,"results":"69","hashOfConfig":"44"},{"size":1225,"mtime":1651867373530,"results":"70","hashOfConfig":"44"},{"size":799,"mtime":1651867341336,"results":"71","hashOfConfig":"44"},{"size":336,"mtime":1651867284299,"results":"72","hashOfConfig":"44"},{"size":1245,"mtime":1651867263004,"results":"73","hashOfConfig":"44"},{"size":389,"mtime":1651867303753,"results":"74","hashOfConfig":"44"},{"size":885,"mtime":1651867357963,"results":"75","hashOfConfig":"44"},{"size":196,"mtime":1651867324170,"results":"76","hashOfConfig":"44"},{"size":1520,"mtime":1651867398007,"results":"77","hashOfConfig":"44"},{"size":6672,"mtime":1655064151348,"results":"78","hashOfConfig":"44"},{"size":1251,"mtime":1655050801639,"results":"79","hashOfConfig":"44"},{"size":5561,"mtime":1655050747688,"results":"80","hashOfConfig":"44"},{"size":5091,"mtime":1655050756550,"results":"81","hashOfConfig":"44"},{"size":293,"mtime":1652045020622,"results":"82","hashOfConfig":"44"},{"size":1240,"mtime":1651827531912,"results":"83","hashOfConfig":"44"},{"size":1479,"mtime":1655049855162,"results":"84","hashOfConfig":"44"},{"size":1576,"mtime":1653757473179,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"12v35sv",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"88"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"88"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"88"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"88"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"88"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"171","messages":"172","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/index.js",[],["181","182"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/App.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reportWebVitals.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/store.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Header.js",["183"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Footer.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/HomeScreen.js",["184","185","186"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Row, Col } from 'react-bootstrap';\nimport Product from '../components/Product';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Paginate from '../components/Paginate';\nimport ProductCarousel from '../components/ProductCarousel';\nimport { listProducts } from '../actions/productActions';\n\nconst HomeScreen = ({ history }) => {\n  const dispatch = useDispatch();\n  const productList = useSelector(state => state.productList);\n  // bring the properties of the state\n  const { error, loading, products } = productList;\n\n  console.log('PRODUCTS LIST ------->', productList);\n\n  //let keyword = history.location.search\n\n  useEffect(() => {\n    dispatch(listProducts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Latest Products</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <div>\n          <Row>\n            {products && products.map((product) => (\n              <Col key={product._id} sm={12} md={6} lg={4} xl={3}>\n                <Product product={product} />\n              </Col>\n            ))}\n          </Row>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default HomeScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/RegisterScreen.js",["187"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/LoginScreen.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/PaymentScreen.js",["188"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { savePaymentMethod } from '../actions/cartActions';\n\nconst PaymentScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress } = cart;\n\n  const dispatch = useDispatch();\n\n  const [paymentMethod, setPaymentMethod] = useState('PayPal');\n\n  if (!shippingAddress.address) {\n    history.push('/shipping');\n  }\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(savePaymentMethod(paymentMethod));\n    history.push('/placeorder');\n  };\n\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 step3 />\n\n      <Form onSubmit={submitHandler}>\n        <Form.Group>\n          <Form.Label as='legend'>Select Method</Form.Label>\n          <Col>\n            <Form.Check\n              type='radio'\n              label='PayPal or Credit Card'\n              id='paypal'\n              name='paymentMethod'\n              checked\n              onChange={(e) => setPaymentMethod(e.target.value)}\n            ></Form.Check>\n          </Col>\n        </Form.Group>\n\n        <Button type='submit' variant='primary'>\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default PaymentScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductScreen.js",["189","190"],"import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport {\n  Row,\n  Col,\n  Image,\n  ListGroup,\n  Button,\n  Card,\n  Form,\n} from 'react-bootstrap';\nimport Rating from '../components/Rating';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport {\n  listProductDetails,\n  createProductReview,\n} from '../actions/productActions';\nimport { PRODUCT_CREATE_REVIEW_RESET } from '../constants/productConstants';\n\nconst ProductScreen = ({ match, history }) => {\n  const [qty, setQty] = useState();\n\n  const dispatch = useDispatch();\n  const productDetails = useSelector((state) => state.productDetails);\n  const { loading, error, product } = productDetails;\n\n  useEffect(() => {\n    dispatch(listProductDetails(match.params.id));\n  }, [dispatch, match]);\n\n  const addToCartHandler = () => {\n    history.push(`/cart/${match.params.id}?qty=${qty}`);\n  }\n\n  return (\n    <div>\n      <Link to='/' className='btn btn-light my-3'>\n        Go Back\n      </Link>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <div>\n          <Row>\n            <Col md={6}>\n              <Image src={product.image} alt={product.name} fluid />\n            </Col>\n\n            <Col md={3}>\n              <ListGroup variant='flush'>\n                <ListGroup.Item>\n                  <h3>{product.name}</h3>\n                </ListGroup.Item>\n\n                <ListGroup.Item>\n                  <Rating\n                    value={product.rating}\n                    text={`${product.numReviews} reviews`}\n                    color={'#f8e825'}\n                  />\n                </ListGroup.Item>\n\n                <ListGroup.Item>Price: ${product.price}</ListGroup.Item>\n\n                <ListGroup.Item>\n                  Description: {product.description}\n                </ListGroup.Item>\n              </ListGroup>\n            </Col>\n\n            <Col md={3}>\n              <Card>\n                <ListGroup variant='flush'>\n                  <ListGroup.Item>\n                    <Row>\n                      <Col>Price:</Col>\n                      <Col>\n                        <strong>${product.price}</strong>\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n                  <ListGroup.Item>\n                    <Row>\n                      <Col>Status:</Col>\n                      <Col>\n                        {product.countInStock > 0 ? 'In Stock' : 'Out of Stock'}\n                      </Col>\n                    </Row>\n                  </ListGroup.Item>\n\n                  {/* ADD TO CART */}\n\n                  {product.countInStock > 0 && (\n                    <ListGroup.Item>\n                      <Row>\n                        <Col>Qty</Col>\n                        <Col xs='auto' className='my-1'>\n                          <Form.Control\n                            as='select'\n                            value={qty}\n                            onChange={(e) => setQty(e.target.value)}\n                          >\n                            {[...Array(product.countInStock).keys()].map(\n                              (x) => (\n                                <option key={x + 1} value={x + 1}>\n                                  {x + 1}\n                                </option>\n                              )\n                            )}\n                          </Form.Control>\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  )}\n\n                  <ListGroup.Item>\n                    <Button\n                      onClick={addToCartHandler}\n                      className='btn-block'\n                      disabled={product.countInStock === 0}\n                      type='button'\n                    >\n                      Add to Cart\n                    </Button>\n                  </ListGroup.Item>\n                </ListGroup>\n              </Card>\n            </Col>\n          </Row>\n\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProductScreen;\n\n\n/*\n\n          REVIEWS\n\n          <Row>\n            <Col md={6}>\n              <h4>Reviews</h4>\n              {product.reviews.length === 0 && (\n                <Message variant='info'>No Reviews</Message>\n              )}\n\n              <ListGroup variant='flush'>\n                {product.reviews.map((review) => (\n                  <ListGroup.Item key={review._id}>\n                    <strong>{review.name}</strong>\n                    <Rating value={review.rating} color='#f8e825' />\n                    <p>{review.createdAt.substring(0, 10)}</p>\n                    <p>{review.comment}</p>\n                  </ListGroup.Item>\n                ))}\n\n              </ListGroup>\n            </Col>\n          </Row>\n\n          CREATE REVIEW\n\n                <ListGroup.Item>\n                  <h4>Write a review</h4>\n\n                  {loadingProductReview && <Loader />}\n                  {successProductReview && (\n                    <Message variant='success'>Review Submitted</Message>\n                  )}\n                  {errorProductReview && (\n                    <Message variant='danger'>{errorProductReview}</Message>\n                  )}\n\n                  {userInfo ? (\n                    <Form onSubmit={submitHandler}>\n                      <Form.Group controlId='rating'>\n                        <Form.Label>Rating</Form.Label>\n                        <Form.Control\n                          as='select'\n                          value={rating}\n                          onChange={(e) => setRating(e.target.value)}\n                        >\n                          <option value=''>Select...</option>\n                          <option value='1'>1 - Poor</option>\n                          <option value='2'>2 - Fair</option>\n                          <option value='3'>3 - Good</option>\n                          <option value='4'>4 - Very Good</option>\n                          <option value='5'>5 - Excellent</option>\n                        </Form.Control>\n                      </Form.Group>\n\n                      <Form.Group controlId='comment'>\n                        <Form.Label>Review</Form.Label>\n                        <Form.Control\n                          as='textarea'\n                          row='5'\n                          value={comment}\n                          onChange={(e) => setComment(e.target.value)}\n                        ></Form.Control>\n                      </Form.Group>\n\n                      <Button\n                        disabled={loadingProductReview}\n                        type='submit'\n                        variant='primary'\n                      >\n                        Submit\n                      </Button>\n                    </Form>\n                  ) : (\n                    <Message variant='info'>\n                      Please <Link to='/login'>login</Link> to write a review\n                    </Message>\n                  )}\n                </ListGroup.Item> \n                \n*/","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProfileScreen.js",["191","192"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/PlaceOrderScreen.js",["193","194"],"import React, { useState, useEffect } from 'react';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Message from '../components/Message';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { createOrder } from '../actions/orderActions';\nimport { ORDER_CREATE_RESET } from '../constants/orderConstants';\n\nconst PlaceOrderScreen = ({ history }) => {\n  const orderCreate = useSelector((state) => state.orderCreate);\n  const { order, error, success } = orderCreate;\n\n  const dispatch = useDispatch();\n\n  const cart = useSelector((state) => state.cart);\n\n  cart.itemsPrice = cart.cartItems\n    .reduce((acc, item) => acc + item.price * item.qty, 0)\n    .toFixed(2);\n  cart.shippingPrice = (cart.itemsPrice > 100 ? 0 : 10).toFixed(2);\n  cart.taxPrice = Number(0.082 * cart.itemsPrice).toFixed(2);\n\n  cart.totalPrice = (\n    Number(cart.itemsPrice) +\n    Number(cart.shippingPrice) +\n    Number(cart.taxPrice)\n  ).toFixed(2);\n\n  if (!cart.paymentMethod) {\n    history.push('/payment');\n  }\n\n  useEffect(() => {\n    if (success) {\n      history.push(`/order/${order._id}`);\n      dispatch({ type: ORDER_CREATE_RESET });\n    }\n  }, [success, history]);\n\n  const placeOrder = () => {\n    dispatch(\n      createOrder({\n        orderItems: cart.cartItems,\n        shippingAddress: cart.shippingAddress,\n        paymentMethod: cart.paymentMethod,\n        itemsPrice: cart.itemsPrice,\n        shippingPrice: cart.shippingPrice,\n        taxPrice: cart.taxPrice,\n        totalPrice: cart.totalPrice,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <CheckoutSteps step1 step2 step3 step4 />\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n\n              <p>\n                <strong>Shipping: </strong>\n                {cart.shippingAddress.address}, {cart.shippingAddress.city}\n                {'  '}\n                {cart.shippingAddress.postalCode},{'  '}\n                {cart.shippingAddress.country}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {cart.paymentMethod}\n              </p>\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {cart.cartItems.length === 0 ? (\n                <Message variant='info'>Your cart is empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {cart.cartItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n\n                        <Col md={4}>\n                          {item.qty} X ${item.price} = $\n                          {(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items:</Col>\n                  <Col>${cart.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping:</Col>\n                  <Col>${cart.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax:</Col>\n                  <Col>${cart.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total:</Col>\n                  <Col>${cart.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                {error && <Message variant='danger'>{error}</Message>}\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Button\n                  type='button'\n                  className='btn-block'\n                  disabled={cart.cartItems === 0}\n                  onClick={placeOrder}\n                >\n                  Place Order\n                </Button>\n              </ListGroup.Item>\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default PlaceOrderScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/CartScreen.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ShippingScreen.js",["195"],"import React, { useState, useEffect } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport FormContainer from '../components/FormContainer';\nimport CheckoutSteps from '../components/CheckoutSteps';\nimport { saveShippingAddress } from '../actions/cartActions';\n\nconst ShippingScreen = ({ history }) => {\n  const cart = useSelector((state) => state.cart);\n  const { shippingAddress } = cart;\n\n  const dispatch = useDispatch();\n\n  const [address, setAddress] = useState(shippingAddress.address);\n  const [city, setCity] = useState(shippingAddress.city);\n  const [postalCode, setPostalCode] = useState(shippingAddress.postalCode);\n  const [country, setCountry] = useState(shippingAddress.country);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(saveShippingAddress({ address, city, postalCode, country }));\n    history.push('/payment');\n  };\n\n  return (\n    <FormContainer>\n      <CheckoutSteps step1 step2 />\n      <h1>Shipping</h1>\n      <Form onSubmit={submitHandler}>\n        <Form.Group controlId='address'>\n          <Form.Label>Address</Form.Label>\n          <Form.Control\n            required\n            type='text'\n            placeholder='Enter address'\n            value={address ? address : ''}\n            onChange={(e) => setAddress(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='city'>\n          <Form.Label>City</Form.Label>\n          <Form.Control\n            required\n            type='text'\n            placeholder='Enter city'\n            value={city ? city : ''}\n            onChange={(e) => setCity(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='postalCode'>\n          <Form.Label>Postal Code</Form.Label>\n          <Form.Control\n            required\n            type='text'\n            placeholder='Enter postal code'\n            value={postalCode ? postalCode : ''}\n            onChange={(e) => setPostalCode(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Form.Group controlId='country'>\n          <Form.Label>Country</Form.Label>\n          <Form.Control\n            required\n            type='text'\n            placeholder='Enter country'\n            value={country ? country : ''}\n            onChange={(e) => setCountry(e.target.value)}\n          ></Form.Control>\n        </Form.Group>\n\n        <Button type='submit' variant='primary'>\n          Continue\n        </Button>\n      </Form>\n    </FormContainer>\n  );\n};\n\nexport default ShippingScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/UserListScreen.js",["196"],"import React, { useState, useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { listUsers, deleteUser } from '../actions/userActions';\n\nconst UserListScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const userList = useSelector((state) => state.userList);\n  const { loading, error, users } = userList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const userDelete = useSelector((state) => state.userDelete);\n  const { success: successDelete } = userDelete;\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, history, successDelete, userInfo]);\n\n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure you want to delete this user?')) {\n      dispatch(deleteUser(id));\n    }\n  };\n\n  return (\n    <div>\n      <h1>Users</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className='table-sm'>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>NAME</th>\n              <th>EMAIL</th>\n              <th>ADMIN</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {users.map((user) => (\n              <tr key={user._id}>\n                <td>{user._id}</td>\n                <td>{user.name}</td>\n                <td>{user.email}</td>\n                <td>\n                  {user.isAdmin ? (\n                    <i className='fas fa-check' style={{ color: 'green' }}></i>\n                  ) : (\n                    <i className='fas fa-check' style={{ color: 'red' }}></i>\n                  )}\n                </td>\n\n                <td>\n                  <LinkContainer to={`/admin/user/${user._id}/edit`}>\n                    <Button variant='light' className='btn-sm'>\n                      <i className='fas fa-edit'></i>\n                    </Button>\n                  </LinkContainer>\n\n                  <Button\n                    variant='danger'\n                    className='btn-sm'\n                    onClick={() => deleteHandler(user._id)}\n                  >\n                    <i className='fas fa-trash'></i>\n                  </Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default UserListScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/UserEditScreen.js",["197"],"import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Form, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport FormContainer from '../components/FormContainer';\nimport { getUserDetails, updateUser } from '../actions/userActions';\nimport { USER_UPDATE_RESET } from '../constants/userConstants';\n\nconst UserEditScreen = ({ match, history }) => {\n  const userId = match.params.id;\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const userDetails = useSelector((state) => state.userDetails);\n  const { error, loading, user } = userDetails;\n\n  const userUpdate = useSelector((state) => state.userUpdate);\n  const {\n    error: errorUpdate,\n    loading: loadingUpdate,\n    success: successUpdate,\n  } = userUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: USER_UPDATE_RESET });\n      history.push('/admin/userlist');\n    } else {\n      if (!user.name || user._id !== Number(userId)) {\n        dispatch(getUserDetails(userId));\n      } else {\n        setName(user.name);\n        setEmail(user.email);\n        setIsAdmin(user.isAdmin);\n      }\n    }\n  }, [user, userId, successUpdate, history]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    dispatch(updateUser({ _id: user._id, name, email, isAdmin }));\n  };\n\n  return (\n    <div>\n      <Link to='/admin/userlist'>Go Back</Link>\n\n      <FormContainer>\n        <h1>Edit User</h1>\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n              <Form.Label>Name</Form.Label>\n              <Form.Control\n                type='name'\n                placeholder='Enter name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='email'>\n              <Form.Label>Email Address</Form.Label>\n              <Form.Control\n                type='email'\n                placeholder='Enter Email'\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n              ></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='isadmin'>\n              <Form.Check\n                type='checkbox'\n                label='Is Admin'\n                checked={isAdmin}\n                onChange={(e) => setIsAdmin(e.target.checked)}\n              ></Form.Check>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </div>\n  );\n};\n\nexport default UserEditScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductListScreen.js",["198"],"import React, { useState, useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button, Row, Col } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport Paginate from '../components/Paginate';\nimport {\n  listProducts,\n  deleteProduct,\n  createProduct,\n} from '../actions/productActions';\nimport { PRODUCT_CREATE_RESET } from '../constants/productConstants';\n\nconst ProductListScreen = ({ history, match }) => {\n  const dispatch = useDispatch();\n\n  const productList = useSelector((state) => state.productList);\n  const { loading, error, products, pages, page } = productList;\n\n  const productDelete = useSelector((state) => state.productDelete);\n  const {\n    loading: loadingDelete,\n    error: errorDelete,\n    success: successDelete,\n  } = productDelete;\n\n  const productCreate = useSelector((state) => state.productCreate);\n  const {\n    loading: loadingCreate,\n    error: errorCreate,\n    success: successCreate,\n    product: createdProduct,\n  } = productCreate;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  let keyword = history.location.search;\n  useEffect(() => {\n    dispatch({ type: PRODUCT_CREATE_RESET });\n\n    if (!userInfo.isAdmin) {\n      history.push('/login');\n    }\n\n    if (successCreate) {\n      history.push(`/admin/product/${createdProduct._id}/edit`);\n    } else {\n      dispatch(listProducts(keyword));\n    }\n  }, [\n    dispatch,\n    history,\n    userInfo,\n    successDelete,\n    successCreate,\n    createdProduct,\n    keyword,\n  ]);\n\n  const deleteHandler = (id) => {\n    if (window.confirm('Are you sure you want to delete this product?')) {\n      dispatch(deleteProduct(id));\n    }\n  };\n\n  const createProductHandler = () => {\n    dispatch(createProduct());\n  };\n\n  return (\n    <div>\n      <Row className='align-items-center'>\n        <Col>\n          <h1>Products</h1>\n        </Col>\n\n        <Col className='text-right'>\n          <Button className='my-3' onClick={createProductHandler}>\n            <i className='fas fa-plus'></i> Create Product\n          </Button>\n        </Col>\n      </Row>\n\n      {loadingDelete && <Loader />}\n      {errorDelete && <Message variant='danger'>{errorDelete}</Message>}\n\n      {loadingCreate && <Loader />}\n      {errorCreate && <Message variant='danger'>{errorCreate}</Message>}\n\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <div>\n          <Table striped bordered hover responsive className='table-sm'>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>NAME</th>\n                <th>PRICE</th>\n                <th>CATEGORY</th>\n                <th>BRAND</th>\n                <th></th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {products.map((product) => (\n                <tr key={product._id}>\n                  <td>{product._id}</td>\n                  <td>{product.name}</td>\n                  <td>${product.price}</td>\n                  <td>{product.category}</td>\n                  <td>{product.brand}</td>\n\n                  <td>\n                    <LinkContainer to={`/admin/product/${product._id}/edit`}>\n                      <Button variant='light' className='btn-sm'>\n                        <i className='fas fa-edit'></i>\n                      </Button>\n                    </LinkContainer>\n\n                    <Button\n                      variant='danger'\n                      className='btn-sm'\n                      onClick={() => deleteHandler(product._id)}\n                    >\n                      <i className='fas fa-trash'></i>\n                    </Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n          <Paginate pages={pages} page={page} isAdmin={true} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default ProductListScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/OrderListScreen.js",["199"],"import React, { useState, useEffect } from 'react';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { Table, Button } from 'react-bootstrap';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Loader from '../components/Loader';\nimport Message from '../components/Message';\nimport { listOrders } from '../actions/orderActions';\n\nconst OrderListScreen = ({ history }) => {\n  const dispatch = useDispatch();\n\n  const orderList = useSelector((state) => state.orderList);\n  const { loading, error, orders } = orderList;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listOrders());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, history, userInfo]);\n\n  return (\n    <div>\n      <h1>Orders</h1>\n      {loading ? (\n        <Loader />\n      ) : error ? (\n        <Message variant='danger'>{error}</Message>\n      ) : (\n        <Table striped bordered hover responsive className='table-sm'>\n          <thead>\n            <tr>\n              <th>ID</th>\n              <th>USER</th>\n              <th>DATE</th>\n              <th>Total</th>\n              <th>PAID</th>\n              <th>DELIVERED</th>\n              <th></th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {orders.map((order) => (\n              <tr key={order._id}>\n                <td>{order._id}</td>\n                <td>{order.user && order.user.name}</td>\n                <td>{order.createdAt.substring(0, 10)}</td>\n                <td>${order.totalPrice}</td>\n\n                <td>\n                  {order.isPaid ? (\n                    order.paidAt.substring(0, 10)\n                  ) : (\n                    <i className='fas fa-check' style={{ color: 'red' }}></i>\n                  )}\n                </td>\n\n                <td>\n                  {order.isDelivered ? (\n                    order.deliveredAt.substring(0, 10)\n                  ) : (\n                    <i className='fas fa-check' style={{ color: 'red' }}></i>\n                  )}\n                </td>\n\n                <td>\n                  <LinkContainer to={`/order/${order._id}`}>\n                    <Button variant='light' className='btn-sm'>\n                      Details\n                    </Button>\n                  </LinkContainer>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport default OrderListScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/ProductEditScreen.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/screens/OrderScreen.js",["200"],"import React, { useState, useEffect } from 'react';\nimport { Button, Row, Col, ListGroup, Image, Card } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { PayPalButton } from 'react-paypal-button-v2';\nimport Message from '../components/Message';\nimport Loader from '../components/Loader';\nimport {\n  getOrderDetails,\n  payOrder,\n  deliverOrder,\n} from '../actions/orderActions';\nimport {\n  ORDER_PAY_RESET,\n  ORDER_DELIVER_RESET,\n} from '../constants/orderConstants';\n\nconst OrderScreen = ({ match, history }) => {\n  const orderId = match.params.id;\n  const dispatch = useDispatch();\n\n  const [sdkReady, setSdkReady] = useState(false);\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, error, loading } = orderDetails;\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { loading: loadingPay, success: successPay } = orderPay;\n\n  const orderDeliver = useSelector((state) => state.orderDeliver);\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  if (!loading && !error) {\n    order.itemsPrice = order.orderItems\n      .reduce((acc, item) => acc + item.price * item.qty, 0)\n      .toFixed(2);\n  }\n\n  const addPayPalScript = () => {\n    const script = document.createElement('script');\n    script.type = 'text/javascript';\n    script.src =\n      'https://www.paypal.com/sdk/js?client-id=AeDXja18CkwFUkL-HQPySbzZsiTrN52cG13mf9Yz7KiV2vNnGfTDP0wDEN9sGlhZHrbb_USawcJzVDgn';\n    script.async = true;\n    script.onload = () => {\n      setSdkReady(true);\n    };\n    document.body.appendChild(script);\n  };\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    }\n\n    if (\n      !order ||\n      successPay ||\n      order._id !== Number(orderId) ||\n      successDeliver\n    ) {\n      dispatch({ type: ORDER_PAY_RESET });\n      dispatch({ type: ORDER_DELIVER_RESET });\n\n      dispatch(getOrderDetails(orderId));\n    } else if (!order.isPaid) {\n      if (!window.paypal) {\n        addPayPalScript();\n      } else {\n        setSdkReady(true);\n      }\n    }\n  }, [dispatch, order, orderId, successPay, successDeliver]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  const deliverHandler = () => {\n    dispatch(deliverOrder(order));\n  };\n\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : (\n    <div>\n      <h1>Order: {order.Id}</h1>\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <p>\n                <strong>Name: </strong> {order.user.name}\n              </p>\n              <p>\n                <strong>Email: </strong>\n                <a href={`mailto:${order.user.email}`}>{order.user.email}</a>\n              </p>\n              <p>\n                <strong>Shipping: </strong>\n                {order.shippingAddress.address}, {order.shippingAddress.city}\n                {'  '}\n                {order.shippingAddress.postalCode},{'  '}\n                {order.shippingAddress.country}\n              </p>\n\n              {order.isDelivered ? (\n                <Message variant='success'>\n                  Delivered on {order.deliveredAt}\n                </Message>\n              ) : (\n                <Message variant='warning'>Not Delivered</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Payment Method</h2>\n              <p>\n                <strong>Method: </strong>\n                {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant='success'>Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant='warning'>Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message variant='info'>Order is empty</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {order.orderItems.map((item, index) => (\n                    <ListGroup.Item key={index}>\n                      <Row>\n                        <Col md={1}>\n                          <Image\n                            src={item.image}\n                            alt={item.name}\n                            fluid\n                            rounded\n                          />\n                        </Col>\n\n                        <Col>\n                          <Link to={`/product/${item.product}`}>\n                            {item.name}\n                          </Link>\n                        </Col>\n\n                        <Col md={4}>\n                          {item.qty} X ${item.price} = $\n                          {(item.qty * item.price).toFixed(2)}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n\n        <Col md={4}>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items:</Col>\n                  <Col>${order.itemsPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping:</Col>\n                  <Col>${order.shippingPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax:</Col>\n                  <Col>${order.taxPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total:</Col>\n                  <Col>${order.totalPrice}</Col>\n                </Row>\n              </ListGroup.Item>\n\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay && <Loader />}\n\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButton\n                      amount={order.totalPrice}\n                      onSuccess={successPaymentHandler}\n                    />\n                  )}\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n            {loadingDeliver && <Loader />}\n            {userInfo &&\n              userInfo.isAdmin &&\n              order.isPaid &&\n              !order.isDelivered && (\n                <ListGroup.Item>\n                  <Button\n                    type='button'\n                    className='btn btn-block'\n                    onClick={deliverHandler}\n                  >\n                    Mark As Delivered\n                  </Button>\n                </ListGroup.Item>\n              )}\n          </Card>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default OrderScreen;\n","/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/cartReducers.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/productReducers.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/orderReducers.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/reducers/userReducers.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/SearchBox.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/ProductCarousel.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Paginate.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/FormContainer.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/CheckoutSteps.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Loader.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Product.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Message.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/components/Rating.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/userActions.js",["201"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/cartActions.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/productActions.js",["202"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/actions/orderActions.js",["203","204","205"],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/cartConstants.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/orderConstants.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/userConstants.js",[],"/Users/damianstone/Documents/Code/courses/django/ecommerce/frontend/src/constants/productConstants.js",[],{"ruleId":"206","replacedBy":"207"},{"ruleId":"208","replacedBy":"209"},{"ruleId":"210","severity":1,"message":"211","line":3,"column":34,"nodeType":"212","messageId":"213","endLine":3,"endColumn":37},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"210","severity":1,"message":"215","line":7,"column":8,"nodeType":"212","messageId":"213","endLine":7,"endColumn":16},{"ruleId":"210","severity":1,"message":"216","line":8,"column":8,"nodeType":"212","messageId":"213","endLine":8,"endColumn":23},{"ruleId":"217","severity":1,"message":"218","line":33,"column":18,"nodeType":"219","messageId":"220","endLine":33,"endColumn":20},{"ruleId":"210","severity":1,"message":"221","line":1,"column":27,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"222","line":18,"column":3,"nodeType":"212","messageId":"213","endLine":18,"endColumn":22},{"ruleId":"210","severity":1,"message":"223","line":20,"column":10,"nodeType":"212","messageId":"213","endLine":20,"endColumn":37},{"ruleId":"210","severity":1,"message":"224","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":14},{"ruleId":"217","severity":1,"message":"218","line":57,"column":18,"nodeType":"219","messageId":"220","endLine":57,"endColumn":20},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"226","line":39,"column":6,"nodeType":"227","endLine":39,"endColumn":24,"suggestions":"228"},{"ruleId":"210","severity":1,"message":"221","line":1,"column":27,"nodeType":"212","messageId":"213","endLine":1,"endColumn":36},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"229","line":43,"column":6,"nodeType":"227","endLine":43,"endColumn":44,"suggestions":"230"},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"210","severity":1,"message":"214","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":25},{"ruleId":"225","severity":1,"message":"231","line":76,"column":6,"nodeType":"227","endLine":76,"endColumn":60,"suggestions":"232"},{"ruleId":"210","severity":1,"message":"233","line":17,"column":3,"nodeType":"212","messageId":"213","endLine":17,"endColumn":28},{"ruleId":"210","severity":1,"message":"234","line":120,"column":13,"nodeType":"212","messageId":"213","endLine":120,"endColumn":17},{"ruleId":"210","severity":1,"message":"235","line":12,"column":3,"nodeType":"212","messageId":"213","endLine":12,"endColumn":18},{"ruleId":"210","severity":1,"message":"236","line":16,"column":3,"nodeType":"212","messageId":"213","endLine":16,"endColumn":22},{"ruleId":"210","severity":1,"message":"237","line":23,"column":3,"nodeType":"212","messageId":"213","endLine":23,"endColumn":22},"no-native-reassign",["238"],"no-negated-in-lhs",["239"],"no-unused-vars","'Row' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Paginate' is defined but never used.","'ProductCarousel' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","'createProductReview' is defined but never used.","'PRODUCT_CREATE_REVIEW_RESET' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'order._id'. Either include them or remove the dependency array.","ArrayExpression",["240"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["241"],"React Hook useEffect has missing dependencies: 'history' and 'userInfo'. Either include them or remove the dependency array.",["242"],"'USER_UPDATE_PROFILE_RESET' is defined but never used.","'data' is assigned a value but never used.","'ORDER_PAY_RESET' is defined but never used.","'ORDER_LIST_MY_RESET' is defined but never used.","'ORDER_DELIVER_RESET' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"243","fix":"244"},{"desc":"245","fix":"246"},{"desc":"247","fix":"248"},"Update the dependencies array to be: [success, history, order._id, dispatch]",{"range":"249","text":"250"},"Update the dependencies array to be: [user, userId, successUpdate, history, dispatch]",{"range":"251","text":"252"},"Update the dependencies array to be: [dispatch, order, orderId, successPay, successDeliver, userInfo, history]",{"range":"253","text":"254"},[1268,1286],"[success, history, order._id, dispatch]",[1378,1416],"[user, userId, successUpdate, history, dispatch]",[2226,2280],"[dispatch, order, orderId, successPay, successDeliver, userInfo, history]"]